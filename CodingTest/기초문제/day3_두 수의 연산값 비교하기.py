# 문제 설명
# 연산 ⊕는 두 정수에 대한 연산으로 두 정수를 붙여서 쓴 값을 반환합니다. 예를 들면 다음과 같습니다.
# 12 ⊕ 3 = 123
# 3 ⊕ 12 = 312
# 양의 정수 a와 b가 주어졌을 때, a ⊕ b와 2 * a * b 중 더 큰 값을 return하는 solution 함수를 완성해 주세요.
# 단, a ⊕ b와 2 * a * b가 같으면 a ⊕ b를 return 합니다.

# 🛠 접근 방식
# - ⊕ 연산은 두 숫자를 문자열로 변환한 후 붙여서 만든 값으로 처리됨.
# - 따라서 a ⊕ b와 b ⊕ a를 비교하여 더 큰 값을 반환해야 함.
# - 숫자를 문자열로 변환한 후 결합하여 정수형으로 변환하면 비교가 가능함.
# - if문을 사용하여 두 값을 비교하여 반환하도록 구현.


# 내 풀이
def solution(a, b):
    ab=int(str(a)+str(b))
    ab2=2*a*b 
    if(ab>=ab2):
        return ab
    else:
        return ab2
    
# ✨ 오답노트
# - if문을 사용하여 비교했지만, 실제로는 max()를 활용하면 더 간결하게 처리 가능함.
# - 두 숫자를 문자열로 변환한 후 max()를 사용하면 별도의 조건문 없이 가장 큰 값 반환 가능.
# - 변수를 str()로 변환하는 과정이 반복되므로 더 효율적인 코드 작성 가능.


# 다른 사람의 풀이
# 1
def solution(a, b):
    return max(int(str(a) + str(b)), 2 * a * b)

# - f 문자열 포맷을 활용하여 간결하게 문자열을 결합.
# - max()를 활용하여 두 숫자를 비교하고 int()로 변환.


# 2
def solution(a, b):
    ab = int(str(a) + str(b))
    ab2 = 2 * a * b
    return max(ab, ab2)

# - str() 변환을 미리 수행하여 중복 연산을 줄임.
# - max()를 사용하여 가장 큰 값 반환.

# 🔍 배운 점
# - 불필요한 조건문 없이 max()를 활용하면 더 간결하고 효율적으로 문제 해결 가능.
# - f 문자열 포맷을 활용하면 가독성을 높일 수 있음.
# - 반복되는 형변환 연산을 줄이는 것도 중요한 최적화 포인트.
