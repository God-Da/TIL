# 문제 설명
# 연산 ⊕는 두 정수에 대한 연산으로 두 정수를 붙여서 쓴 값을 반환합니다. 예를 들면 다음과 같습니다.
# 12 ⊕ 3 = 123
# 3 ⊕ 12 = 312
# 양의 정수 a와 b가 주어졌을 때, a ⊕ b와 b ⊕ a 중 더 큰 값을 return 하는 solution 함수를 완성해 주세요.
# 단, a ⊕ b와 b ⊕ a가 같다면 a ⊕ b를 return 합니다.

# 🛠 접근 방식
# 1. ⊕ 연산은 두 정수를 문자열로 변환한 후 이어 붙인 값을 반환하는 방식임.
# 2. 따라서 a ⊕ b와 b ⊕ a를 비교하여 더 큰 값을 반환해야 함.
# 3. 숫자를 문자열로 변환한 후 결합하여 정수형으로 변환하면 비교가 가능함.
# 4. `if` 문을 사용하여 두 값을 비교하고 반환하는 구조로 구현.

# 내 풀이
def solution(a, b):
    # 문자열로 변환 후 결합하여 정수형으로 변환
    ab = int(str(a) + str(b))
    ba = int(str(b) + str(a))

    # 두 값 비교 후 더 큰 값 반환
    if ab >= ba:
        return ab
    else:
        return ba

# ✨ 오답노트
# 1. `if` 문을 사용하여 비교했지만, `max()` 함수를 활용하면 불필요한 조건문 없이 더 간결하게 처리 가능.
# 2. 두 숫자를 문자열로 변환한 후 `max()`를 사용하면 별도의 조건문 없이 가장 큰 값을 반환할 수 있음.
# 3. 변수를 `str()`로 변환하는 과정이 반복되므로, 한 번만 변환하여 처리하면 더 효율적임.

# 다른 사람의 풀이

# 1. 문자열 포맷을 활용한 코드
def solution(a, b):
    # f-string을 이용해 문자열 결합 후 max()를 사용하여 비교
    return int(max(f"{a}{b}", f"{b}{a}"))

# 2. 문자열 변환을 미리 수행하여 중복 연산을 줄인 코드
def solution(a, b):
    # 미리 숫자를 문자열로 변환하여 저장
    a, b = str(a), str(b)
    # max()를 활용해 더 큰 값 반환
    return int(max(a + b, b + a))

# 🔍 배운 점
# - 불필요한 조건문 없이 `max()`를 활용하면 더 간결하고 효율적으로 문제를 해결할 수 있음.
# - `f` 문자열 포맷을 활용하면 가독성이 높아지고 코드가 깔끔해짐.
# - 반복되는 형변환 연산을 줄이는 것도 중요한 최적화 포인트.
# - 앞으로는 `max()`와 `f-string`을 적극적으로 활용하여 깔끔한 코드 작성하기!